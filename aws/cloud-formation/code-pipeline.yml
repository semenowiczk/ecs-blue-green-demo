AWSTemplateFormatVersion: 2010-09-09

Parameters:
  StackFamily:
    Type: String
    Default: ecs-blue-green-board
  GitHubOwner:
    Type: String
    Default: semenowiczk
  GitHubRepository:
    Type: String
    Default: ecs-blue-green-demo
  GitHubBranch:
    Type: String
    Default: main
  GithubTokenSecret:
    Type: String
    Default: main

Resources:
  PilelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${StackFamily}-codebuild"
      RetentionInDays: 14

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: CodeBuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - iam:PassRole
                  - secretsmanager:GetSecretValue
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:List*
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref PilelineArtifactStore]]
                  - !Join ['', ['arn:aws:s3:::', !Ref PilelineArtifactStore, '/*']]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BuildLogGroup}:log-stream:*"
              - Effect: Allow
                Action:
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${StackFamily}-build"
      Artifacts:
        Type: CODEPIPELINE
      ServiceRole: !Ref BuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws/code-build/buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
            Type: PLAINTEXT
          - Name: PROJECT_NAMESPACE
            Value: !Ref StackFamily
            Type: PLAINTEXT
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogGroup
          Status: ENABLED

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: CodePipeline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:List*
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref PilelineArtifactStore]]
                  - !Join ['', ['arn:aws:s3:::', !Ref PilelineArtifactStore, '/*']]
              - Effect: Allow
                Action:
                  - ecs:*
                  - iam:PassRole
                Resource: "*"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${StackFamily}-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                PollForSourceChanges: false
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub "{{resolve:secretsmanager:${StackFamily}-secrets-github:SecretString:access-token}}"
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Region: eu-central-1
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: DeployAPI
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Sub "${StackFamily}-api"
                DeploymentGroupName: !Sub "${StackFamily}-dg"
                TaskDefinitionTemplateArtifact: BuildArtifact
                TaskDefinitionTemplatePath: apitaskdef.json 
                AppSpecTemplateArtifact: BuildArtifact
                AppSpecTemplatePath: appspecAPI.yml
              RunOrder: 3
            - Name: DeployClient
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Sub "${StackFamily}-client"
                DeploymentGroupName: !Sub "${StackFamily}-dg"
                TaskDefinitionTemplateArtifact: BuildArtifact
                TaskDefinitionTemplatePath: clienttaskdef.json
                AppSpecTemplateArtifact: BuildArtifact
                AppSpecTemplatePath: appspecClient.yml
              RunOrder: 3

      ArtifactStore:
        Type: S3
        Location: !Ref PilelineArtifactStore

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${StackFamily}-secrets-github:SecretString:access-token}}"
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetAction: Source
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true
